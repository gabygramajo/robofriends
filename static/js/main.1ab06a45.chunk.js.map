{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","container/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAgBeA,EAbF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAExB,OACI,sBAAKC,UAAU,uDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,8BAEQA,EAAOC,KAAK,SAACC,EAAKC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCClBC,EAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACbU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YC2CJC,G,wDAxCX,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,S,oBAO1C,WACI,MAAgCC,KAAKN,MAA7BvB,EAAR,EAAQA,OAAQoB,EAAhB,EAAgBA,YACVU,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAGzD,OAAIjC,EAAOmC,OAIH,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ8B,SAPvB,8C,GA1BDM,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.1ab06a45.chunk.js","sourcesContent":["import React from 'react'; // importando react\n\n// Creando la funcion que retorne nuestro componente.\nconst Card = ({name, email, id }) => {\n    // const {name, email, id } = props; lo podemos hacer directamente en los parametros\n    return (\n        <div className='tc bg-light-green dib br3 pa3  ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n\n// https://robohash.org/ es una api que genera imagenes de robot aleatoreamente.\n// ?200x200 es para indicar que sea un imagen de 200px en alto y ancho.\n// className='bg-light-green dib br3 pa3  ma2 grow' son clases de paquete tachyons\n// props son propiedades que se pueden recibir como parametros en el componente y todo lo que sea js debe ir entre {}\n// en img tenemos src={`https://robohash.org/${props.id}?200x200`} y usamos props.id para generar un imagen distinta en cada Card, con destruturing solo queda id.","import React from 'react';\nimport Card from './Card'; // importando nuestro componente card.\n\n\n\nconst CardList = ({ robots }) => {\n    \n    return (\n        <div>\n            {\n                robots.map( (user,i) => {\n                    return (\n                        <Card \n                            key={i} \n                            id={robots[i].id} \n                            name={robots[i].name} \n                            email={robots[i].email}\n                        /> \n                    )})\n            }\n        </div>\n    );\n}\n\nexport default CardList;\n/*\n    const cardArrayComponent = robots.map( (user,i) => {\n        return (\n            <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email}\n            /> \n        );\n    });\n    return (\n        <div>\n            {cardArrayComponent}\n        </div>\n    );\n    const cardArrayComponent = robots.map( (user,i) => {\n        return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/> ;\n    });\n    Estamos creando un componente Card dinamicamente y almacenandolo en un array para asi poder renderizar todas las tarjetas.\n*/","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2' >\n            <input className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;\n\n// onChange https://www.w3schools.com/jsref/event_onchange.asp","// // import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;\n/*\n<Scroll>\n    <CardList robots={filteredRobots}/>\n </Scroll>\n\n El componente Scroll envuelve al componente CardList para poder utilizar la propiedad de react de props.children. O sea, CardList pasa a ser hijo de Scroll, por lo tanto podemos acceder a sus hijos utilizando props.children.\n\n style={ style es un atributo como el de html, osea como className.\n     {\n        overflowY: 'scroll', \n        border: '2px solid black', \n        height: '800px'\n     }\n    }>\n*/","import React,{ Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n// import { robots } from './robots';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n    constructor(){ \n        super();\n        this.state = { // Creando nuestro estado\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json() )\n        .then(users => this.setState({robots: users}) )\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value }) // actualiza la propiedad con la entradas del input \n    }\n\n    render(){\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n\n        if(!robots.length){ // robots.length === 0\n            return <h1>Loanding</h1>\n        } else {\n            return (\n                <div className='tc' >\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n\n/*\n<CardList robots={robots}/> ya no accedemos desde el objeto robots, sino que accedemos desde el estado para poder cambiarlo.\n\nconst filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\nEN esta funcion filteredRobots accedemos al array robots usando el método filter para que nos retorne solo los robots que coincidan con la búsqueda almacenada en searchfield, para ello dentro del metodo filter utilizamos otro método includes para que si el valor de searchfield coincide con el nombre del robot o robots, retorne true y asi el metodo filter vaya creando el array con los robots\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; // importa la libreria react\nimport ReactDOM from 'react-dom'; // importa el modulo reactDOM\nimport './index.css'; // importa el css del componente y con ./ indicamos la ubicacion, en este caso es en la misma carpeta\n\nimport App from './container/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}